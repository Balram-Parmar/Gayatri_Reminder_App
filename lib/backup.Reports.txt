import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:async';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:path/path.dart' as path;

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  DateTime? _sunrise;
  DateTime? _sunset;
  DateTime? _solarNoon;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _getSunTimesToday();
    });
  }

  Future<void> _getSunTimesToday() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final dir = await getApplicationDocumentsDirectory();
      final file = File(path.join(dir.path, 'SunriseTimes.json'));
      final today = DateTime.now();
      final todayStr =
          "${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}";

      Map<String, dynamic> data;
      bool needsFreshData = true;

      if (await file.exists()) {
        try {
          final contents = await file.readAsString();
          data = jsonDecode(contents);

          final todayEntryIndex = data['results'].indexWhere(
            (entry) => entry['date'] == todayStr,
          );

          if (todayEntryIndex != -1) {
            needsFreshData = false;
            final todayEntry = data['results'][todayEntryIndex];

            setState(() {
              _sunrise = _parseTime(todayEntry['date'], todayEntry['sunrise']);
              _sunset = _parseTime(todayEntry['date'], todayEntry['sunset']);
              _solarNoon = _parseTime(
                todayEntry['date'],
                todayEntry['solar_noon'],
              );
            });
          }
        } catch (e) {
          debugPrint('Error parsing local data: $e');
        }
      }

      if (needsFreshData) {
        var pos = await _getLocation();
        double latitude = pos.latitude;
        double longitude = pos.longitude;
        var date = DateTime.now();

        var dateStart =
            "${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}";

        var endDate = date.add(const Duration(days: 30));
        var dateEnd =
            "${endDate.year}-${endDate.month.toString().padLeft(2, '0')}-${endDate.day.toString().padLeft(2, '0')}";

        final url =
            "https://api.sunrisesunset.io/json?lat=$latitude&lng=$longitude&date_start=$dateStart&date_end=$dateEnd&formatted=0";

        final response = await http.get(Uri.parse(url));

        if (response.statusCode != 200) {
          throw Exception('Failed to load sun times');
        }

        data = jsonDecode(response.body);

        final todayEntry = data['results'].firstWhere(
          (entry) => entry['date'] == todayStr,
          orElse: () => data['results'][0],
        );

        setState(() {
          _sunrise = _parseTime(todayEntry['date'], todayEntry['sunrise']);
          _sunset = _parseTime(todayEntry['date'], todayEntry['sunset']);
          _solarNoon = _parseTime(todayEntry['date'], todayEntry['solar_noon']);
        });

        await file.writeAsString(jsonEncode(data));
      }
    } catch (e) {
      debugPrint('Error getting sun times: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error:$e'), backgroundColor: Colors.red),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<Position> _getLocation() async {
    try {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) throw Exception('Location services are disabled.');

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          throw Exception('Location permissions are denied.');
        }
      }
      if (permission == LocationPermission.deniedForever) {
        throw Exception('Location permissions are permanently denied.');
      }

      final lastPosition = await Geolocator.getLastKnownPosition();
      if (lastPosition != null &&
          DateTime.now().difference(lastPosition.timestamp).inMinutes < 30) {
        return lastPosition;
      }

      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.medium,
        timeLimit: const Duration(seconds: 10),
      );
    } catch (e) {
      debugPrint('Error getting location: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Unable to get your location. Using default location.'),
          duration: Duration(seconds: 3),
        ),
      );

      return Position(
        latitude: 40.7128,
        longitude: -74.0060,
        timestamp: DateTime.now(),
        accuracy: 0,
        altitude: 0,
        heading: 0,
        speed: 0,
        speedAccuracy: 0,
        altitudeAccuracy: 0,
        headingAccuracy: 0,
      );
    }
  }

  DateTime _parseTime(String dateStr, String timeStr) {
    try {
      bool isPM = timeStr.toLowerCase().contains('pm');
      timeStr = timeStr
          .replaceAll(' AM', '')
          .replaceAll(' PM', '')
          .replaceAll(' am', '')
          .replaceAll(' pm', '');

      List<String> timeParts = timeStr.split(':');
      int hours = int.parse(timeParts[0]);

      if (isPM && hours != 12) {
        hours += 12;
      }
      if (!isPM && hours == 12) {
        hours = 0;
      }

      timeStr =
          '${hours.toString().padLeft(2, '0')}:${timeParts[1]}:${timeParts[2]}';

      String dateTimeStr = '${dateStr}T$timeStr';
      return DateTime.parse(dateTimeStr);
    } catch (e) {
      debugPrint('Error parsing time: $e');
      return DateTime.now();
    }
  }

  String _formatTime(DateTime time) {
    final hour =
        time.hour > 12 ? time.hour - 12 : (time.hour == 0 ? 12 : time.hour);
    final minute = time.minute.toString().padLeft(2, '0');
    final period = time.hour >= 12 ? 'PM' : 'AM';
    return '$hour:$minute $period';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Sun Times Today',
                    style: TextStyle(
                      fontSize: 30, // Increased from 24 to 30
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.refresh,
                      size: 40,
                      color: Colors.black,
                    ), // Increased from 32 to 40
                    onPressed: _getSunTimesToday,
                  ),
                ],
              ),
              const SizedBox(height: 16),
              if (_isLoading)
                Expanded(child: Center(child: CircularProgressIndicator()))
              else ...[
                ListTile(
                  leading: Icon(
                    Icons.wb_sunny,
                    color: Colors.orange[700],
                    size: 32,
                  ), // Increased to 32
                  title: Text(
                    'Sunrise',
                    style: TextStyle(color: Colors.black, fontSize: 20),
                  ), // Increased from 16 to 20
                  trailing: Text(
                    _sunrise != null ? _formatTime(_sunrise!) : 'Loading...',
                    style: TextStyle(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 20, // Increased from 16 to 20
                    ),
                  ),
                ),
                Divider(),

                ListTile(
                  leading: Icon(
                    Icons.wb_sunny_outlined,
                    color: Colors.orange[700],
                    size: 32,
                  ), // Increased to 32
                  title: Text(
                    'Solar Noon',
                    style: TextStyle(color: Colors.black, fontSize: 20),
                  ), // Increased from 16 to 20
                  trailing: Text(
                    _solarNoon != null
                        ? _formatTime(_solarNoon!)
                        : 'Loading...',
                    style: TextStyle(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 20, // Increased from 16 to 20
                    ),
                  ),
                ),
                Divider(),
                ListTile(
                  leading: Icon(
                    Icons.nightlight_round,
                    color: Colors.orange[700],
                    size: 32,
                  ), // Increased to 32
                  title: Text(
                    'Sunset',
                    style: TextStyle(color: Colors.black, fontSize: 20),
                  ), // Increased from 16 to 20
                  trailing: Text(
                    _sunset != null ? _formatTime(_sunset!) : 'Loading...',
                    style: TextStyle(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 20, // Increased from 16 to 20
                    ),
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
com.example.get_location