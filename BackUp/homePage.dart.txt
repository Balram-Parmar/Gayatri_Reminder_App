import 'package:flutter/material.dart';
import 'dart:convert';

import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String? _message;
  String? _sunrise;
  String? _sunset;
  double? _latitude;
  double? _longitude;
  bool _loading = false;
  DateTime? _selectedDate;

  Future<Position> _getLocation() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw Exception('Location services are disabled.');
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception('Location permissions are denied.');
      }
    }
    if (permission == LocationPermission.deniedForever) {
      throw Exception('Location permissions are permanently denied.');
    }

    return await Geolocator.getCurrentPosition();
  }

  Future<Map<String, dynamic>> _getSunTime(
    double latitude,
    double longitude, [
    DateTime? date,
  ]) async {
    String url =
        'https://api.sunrisesunset.io/json?lat=$latitude&lng=$longitude';
    if (date != null) {
      String formattedDate =
          '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
      url += '&date=$formattedDate';
    }
    final response = await http.get(Uri.parse(url));
    if (response.statusCode != 200) {
      throw Exception(
        'Failed to fetch sunrise/sunset (HTTP ${response.statusCode}).',
      );
    }
    print(response.body);
    final data = jsonDecode(response.body) as Map<String, dynamic>;
    return data['results'] as Map<String, dynamic>;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sunrise and Sunset Times')),
      body: Center(
        child:
            _loading
                ? const CircularProgressIndicator()
                : Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [Colors.blue.shade100, Colors.blue.shade50],
                    ),
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 10,
                        spreadRadius: 2,
                      ),
                    ],
                  ),
                  margin: const EdgeInsets.all(30),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Date selection
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            'Date: ${_selectedDate != null ? _selectedDate!.toString().split(' ')[0] : 'Current'}',
                            style: const TextStyle(fontSize: 16),
                          ),
                          const SizedBox(width: 10),
                          ElevatedButton(
                            onPressed: () async {
                              final picked = await showDatePicker(
                                context: context,
                                initialDate: _selectedDate ?? DateTime.now(),
                                firstDate: DateTime(2000),
                                lastDate: DateTime(2100),
                              );
                              if (picked != null) {
                                setState(() {
                                  _selectedDate = picked;
                                });
                              }
                            },
                            child: const Text('Select Date'),
                          ),
                        ],
                      ),
                      const SizedBox(height: 20),
                      const Text(
                        'Your Location',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                      const SizedBox(height: 20),
                      if (_message != null)
                        Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: Colors.red.shade50,
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(color: Colors.red.shade200),
                          ),
                          child: Text(
                            _message!,
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.red.shade700,
                            ),
                          ),
                        ),
                      if (_sunrise != null && _sunset != null)
                        Column(
                          children: [
                            Text(
                              'For ${_selectedDate != null ? _selectedDate!.toString().split(' ')[0] : 'Today'}',
                              style: const TextStyle(fontSize: 18),
                            ),
                            const SizedBox(height: 10),
                            Container(
                              margin: const EdgeInsets.symmetric(vertical: 20),
                              padding: const EdgeInsets.all(16),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(12),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.05),
                                    blurRadius: 5,
                                    spreadRadius: 1,
                                  ),
                                ],
                              ),
                              child: Column(
                                children: [
                                  _infoRow(
                                    Icons.wb_sunny,
                                    'Sunrise',
                                    _sunrise!,
                                  ),
                                  const Divider(height: 20),
                                  _infoRow(
                                    Icons.nightlight_round,
                                    'Sunset',
                                    _sunset!,
                                  ),
                                  const Divider(height: 20),
                                  _infoRow(
                                    Icons.location_on,
                                    'Latitude',
                                    _latitude!.toStringAsFixed(5),
                                  ),
                                  const Divider(height: 20),
                                  _infoRow(
                                    Icons.explore,
                                    'Longitude',
                                    _longitude!.toStringAsFixed(5),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: () async {
                          setState(() {
                            _loading = true;
                            _message = null;
                            _sunrise = null;
                            _sunset = null;
                          });
                          try {
                            final pos = await _getLocation();
                            _latitude = pos.latitude;
                            _longitude = pos.longitude;

                            final sunResults = await _getSunTime(
                              pos.latitude,
                              pos.longitude,
                              _selectedDate,
                            );

                            setState(() {
                              _sunrise = sunResults['sunrise'] as String;
                              _sunset = sunResults['sunset'] as String;
                            });
                          } catch (e) {
                            setState(() {
                              _message = e.toString();
                            });
                          } finally {
                            setState(() {
                              _loading = false;
                            });
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 12,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30),
                          ),
                          elevation: 5,
                        ),
                        child: const Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.wb_sunny),
                            SizedBox(width: 8),
                            Text(
                              'Get Times',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
      ),
    );
  }

  Widget _infoRow(IconData icon, String label, String value) {
    return Row(
      children: [
        Icon(icon, color: Colors.blue),
        const SizedBox(width: 10),
        Text(
          '$label:',
          style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        const Spacer(),
        Text(value, style: const TextStyle(fontSize: 16)),
      ],
    );
  }
}
